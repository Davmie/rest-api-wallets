// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	models "github.com/Davmie/javaCode/models"
	mock "github.com/stretchr/testify/mock"
)

// WalletRepositoryI is an autogenerated mock type for the WalletRepositoryI type
type WalletRepositoryI struct {
	mock.Mock
}

// Create provides a mock function with given fields: w
func (_m *WalletRepositoryI) Create(w *models.Wallet) error {
	ret := _m.Called(w)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Wallet) error); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *WalletRepositoryI) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *WalletRepositoryI) Get(id int) (*models.Wallet, error) {
	ret := _m.Called(id)

	var r0 *models.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Wallet, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Wallet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *WalletRepositoryI) GetAll() ([]*models.Wallet, error) {
	ret := _m.Called()

	var r0 []*models.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Wallet, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Wallet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUID provides a mock function with given fields: uid
func (_m *WalletRepositoryI) GetByUID(uid string) (*models.Wallet, error) {
	ret := _m.Called(uid)

	var r0 *models.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Wallet, error)); ok {
		return rf(uid)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Wallet); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: w
func (_m *WalletRepositoryI) Update(w *models.Wallet) error {
	ret := _m.Called(w)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Wallet) error); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWalletRepositoryI creates a new instance of WalletRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletRepositoryI {
	mock := &WalletRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
